<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_crawler</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initialize all of our variables
life = 1800/(instance_number(obj_dungeon_carver)+1);//how long a carver should carve

dir_change = irandom(2);//how long until it changes directions

spd = 32;//grid width. the carver moves at 1 block per step, placing floor objects as it goes

rm_chance = 0;//chance to carve a room

rm_width = choose(2,3,4,5);//room's width

rm_height= choose(2,3,4,5);//room's height

flr = obj_floor;//floor object to be created while carving

door = obj_door;//door object to move to the next level. when the last carver is destroyed, it spawns a door at its location

spawn_mod = 1;//we don't want to spawn another carver at creation

spawn_chance = 1;//but we need these initialized for later

half_width = room_width/10;//half of the final view's width. we'll be using this to keep the carver from getting near the edge of the room

half_height = room_height/10;//half of the final view's height. same as above

for (i=-3;i&lt;=3;i+=1) {//we need to create an open room when the carver first spawns
    for (j=-3;j&lt;=3;j+=1) { //this prevents the player from being spawned in the middle of a wall
        instance_create(x+(i*spd),y+(j*spd),flr);//create the top/right sections
    }
}


//start carving
dir = choose(0,90,180,270);//randomly choose a direction to start carving

motion_set(dir,spd);//start moving in that direction at the speed specified

alarm[0] = life;//once it's reached it's lifespan, alarm[0] will destroy it

alarm[1] = dir_change;//when alarm[1] goes off, another direction is chosen randomly and the alarm resets itself

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_number(obj_dungeon_carver) = 1 {//if this is the last dungeon carver
    instance_create(x,y,door);//create an exit door
    scr_dungeon_walls(flr,spd,obj_wall);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*same process as in the create event

randomly choose a direction
move in that direction
randomly assign a new timer to change directions
set the alarm to that new value

*/
if(dir == 90) {
    dir = choose(0,180,270);
}else if(dir == 180) {
    dir = choose(0,90,270);
}else if(dir == 270) {
    dir = choose(0,90,180);
}else {
    dir = choose(90,180,270);
}

motion_set(dir,spd);
dir_change = irandom(2)+10;
alarm[1] = dir_change;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,flr);//create a new floor block on every space the carver touches

spawn_mod = instance_number(obj_dungeon_carver);//lowers chance to spawn a new carver based on number of carver objects

spawn_chance = irandom(500*(spawn_mod+1));//chance to spawn a new carver

if spawn_chance = 0 {//when the right integer is chosen
    //instance_create(x,y,obj_dungeon_carver);//create a new carver at this location
}


rm_chance = irandom(25);//chance to carve a new room

if rm_chance = 0 {//when the right integer is chosen, create a new room
    rm_width = choose(4,5,6);//new room's height
    rm_height = choose(4,5,6);//new room_width
    for (i=-rm_width;i&lt;=rm_width;i+=1) {//for loop to cover the area selected
        for (j=-rm_height;j&lt;=rm_height;j+=1) {
            instance_create(x+(i*spd),y+(j*spd),flr);//create the top/right sections
        }
    }
}

//contrain the carver's movement
x = min(x,room_width-half_width);//keep the carver from getting too close to the right side of the room
x = max(half_width,x);//keep the carver from getting too close to the left side of the room
y = min(y,room_height-half_height);//keep the carver from getting too close to the bottom of the room
y = max(half_height,y);//keep the carver from getting too close to the top of the room
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
